---
description: 
globs: 
alwaysApply: true
---
  # NextJS/React Context
  
  You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.
  
  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  
  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  
  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  
  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  
  UI and Styling
  - Use Shadcn UI, Radix, and Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  
  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  
  Follow Next.js docs for Data Fetching, Rendering, and Routing.
  

# PayloadCMS Context

This project is built using PayloadCMS, a headless content management system built with TypeScript, Express, MongoDB, and React. This document provides context for Cursor AI to assist with PayloadCMS development.

Follow PayloadCMS docs for field and globals configuration.

# Development Guidelines

- Custom UI and field components can usually be imported from `@payloadcms/ui`
- Ensure all additional libraries used along side Payload (e.g. `@payloadcms/ui`) are installed with the same version installed as Paylaod. For example, if the project has installed `@payloadcms/next@3.28.1` then the ui package needs to be installed the same `pnpm add @payloadcms/ui@3.28.1`. This applies to all payload related libraries.
- Use consistent naming conventions (camelCase for variables, PascalCase for components)
- Write meaningful comments for complex logic
- Always use `pnpm` for dev and installing
- Use "kabob-case" when naming files.
- All strictly payload configuration and customization code, custom fields, etc, can be placed in the `src/config` folder.

## Field Types

PayloadCMS provides these field types:

- `Array`: The Array Field is used when you need to have a set of "repeating" Fields.
- `Blocks`: The Blocks Field is incredibly powerful, storing an array of objects based on the fields that you define, where each item in the array is a "block" with its own unique schema.
- `Checkbox`: The Checkbox Field saves a boolean in the database.
- `JSON`: The JSON Field saves raw JSON to the database and provides the Admin Panel with a code editor styled interface. This is different from the Code Field which saves the value as a string in the database.
- `Code`: The Code Field saves a string in the database, but provides the Admin Panel with a code editor styled interface.
- `Collapsible`: The Collapsible Field is presentational-only and only affects the Admin Panel. By using it, you can place fields within a nice layout component that can be collapsed / expanded.
- `Date`: The Date Field saves a Date in the database and provides the Admin Panel with a customizable time picker interface.
- `Email`: The Email Field enforces that the value provided is a valid email address.
- `Group`: The Group Field allows Fields to be nested under a common property name. It also groups fields together visually in the Admin Panel.
- `Number`: The Number Field stores and validates numeric entry and supports additional numerical validation and formatting features.
- `Point`: The Point Field saves a pair of coordinates in the database and assigns an index for location related queries. The data structure in the database matches the GeoJSON structure to represent point. The Payload API simplifies the object data to only the [longitude, latitude] location.
- `Radio Group`: The Radio Field allows for the selection of one value from a predefined set of possible values and presents a radio group-style set of inputs to the Admin Panel.
- `Relationship`: The Relationship Field is one of the most powerful fields Payload features. It provides the ability to easily relate documents together.
- `Rich Text`: The Rich Text Field lets editors write and format dynamic content in a familiar interface. The content is saved as JSON in the database and can be converted to HTML or any other format needed.
- `Join`: The Join Field is used to make Relationship and Upload fields available in the opposite direction. With a Join you can edit and view collections having reference to a specific collection document. The field itself acts as a virtual field, in that no new data is stored on the collection with a Join field. Instead, the Admin UI surfaces the related documents for a better editing experience and is surfaced by Payload's APIs.
- `Row`: The Row Field is presentational-only and only affects the Admin Panel. By using it, you can arrange Fields next to each other horizontally.
- `Select`: The Select Field provides a dropdown-style interface for choosing options from a predefined list as an enumeration.
- `Tabs`: The Tabs Field is presentational-only and only affects the Admin Panel (unless a tab is named). By using it, you can place fields within a nice layout component that separates certain sub-fields by a tabbed interface.
- `Text`: The Text Field is one of the most commonly used fields. It saves a string to the database and provides the Admin Panel with a simple text input.
- `Textarea`: The Textarea Field is nearly identical to the Text Field but it features a slightly larger input that is better suited to edit longer text.
- `UI`: The UI (user interface) Field gives you a ton of power to add your own React components directly into the Admin Panel, nested directly within your other fields. It has absolutely no effect on the data of your documents. It is presentational-only. Think of it as a way for you to "plug in" your own React components directly within your other fields, so you can provide your editors with new controls exactly where you want them to go.
- `Upload`: The Upload Field allows for the selection of a Document from a Collection supporting Uploads, and formats the selection as a thumbnail in the Admin Panel.

## Collect/Field Examples

Examples of commonly used fields

```typescript
import type { CollectionConfig } from "payload";

export const Media: CollectionConfig = {
  slug: "media",
  access: {
    read: () => true,
  },
  fields: [
    {
      name: "alt",
      type: "text",
      required: true,
    },
  ],
  upload: true,
};
```

